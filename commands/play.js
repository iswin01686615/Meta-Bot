import { SlashCommandBuilder } from "discord.js";
import {
    joinVoiceChannel,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus,
    NoSubscriberBehavior,
} from "@discordjs/voice";
import play from "play-dl";

// ==============================
// üîß FIX 1: Th√™m cookie YouTube
// ==============================
if (process.env.YT_COOKIE) {
    play.setToken({
        youtube: {
            cookie: process.env.YT_COOKIE,
        },
    });
}

const queue = new Map();

export default {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("Ph√°t nh·∫°c t·ª´ YouTube (link ho·∫∑c t√™n b√†i h√°t)")
        .addStringOption((option) =>
            option
                .setName("query")
                .setDescription("Link ho·∫∑c t√™n b√†i h√°t")
                .setRequired(true)
        ),

    async execute(interaction) {
        const query = interaction.options.getString("query");
        const voiceChannel = interaction.member.voice.channel;

        // ==============================
        // üß© Ki·ªÉm tra ng∆∞·ªùi d√πng
        // ==============================
        if (!voiceChannel) {
            return interaction.reply({
                content: "üö´ B·∫°n ph·∫£i v√†o k√™nh tho·∫°i tr∆∞·ªõc!",
                ephemeral: true,
            });
        }

        // ==============================
        // üïì Tr√¨ ho√£n ph·∫£n h·ªìi (ƒë·ªÉ tr√°nh l·ªói reply)
        // ==============================
        await interaction.deferReply();

        try {
            // ==============================
            // üîç T√¨m b√†i h√°t
            // ==============================
            let songInfo;
            if (play.yt_validate(query) === "video") {
                songInfo = await play.video_info(query);
            } else {
                const searched = await play.search(query, { limit: 1 });
                if (!searched.length) {
                    return interaction.editReply("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o.");
                }
                songInfo = await play.video_info(searched[0].url);
            }

            const song = {
                title: songInfo.video_details.title,
                url: songInfo.video_details.url,
                duration: songInfo.video_details.durationRaw,
            };

            // ==============================
            // üé∂ H√†ng ch·ªù ph√°t nh·∫°c
            // ==============================
            let serverQueue = queue.get(interaction.guild.id);

            if (!serverQueue) {
                const queueConstruct = {
                    voiceChannel,
                    connection: null,
                    songs: [],
                    player: createAudioPlayer({
                        behaviors: { noSubscriber: NoSubscriberBehavior.Play },
                    }),
                };

                queue.set(interaction.guild.id, queueConstruct);
                queueConstruct.songs.push(song);

                const connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: interaction.guild.id,
                    adapterCreator: interaction.guild.voiceAdapterCreator,
                });

                queueConstruct.connection = connection;

                // B·∫Øt ƒë·∫ßu ph√°t b√†i h√°t ƒë·∫ßu ti√™n
                await playSong(interaction, queueConstruct.songs[0]);
            } else {
                serverQueue.songs.push(song);
                await interaction.editReply(
                    `‚úÖ **${song.title}** ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù!`
                );
            }
        } catch (err) {
            console.error("‚ùå L·ªói ph√°t nh·∫°c:", err);
            await interaction.editReply("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c!");
        }
    },
};

// ==============================
// üéµ H√†m ph√°t nh·∫°c
// ==============================
async function playSong(interaction, song) {
    const serverQueue = queue.get(interaction.guild.id);
    if (!song) {
        serverQueue.connection.destroy();
        queue.delete(interaction.guild.id);
        await interaction.editReply("‚úÖ ƒê√£ ph√°t xong danh s√°ch!");
        return;
    }

    try {
        // ==============================
        // üîä L·∫•y stream nh·∫°c t·ª´ YouTube
        // ==============================
        const stream = await play.stream(song.url);
        const resource = createAudioResource(stream.stream, {
            inputType: stream.type,
        });

        serverQueue.player.play(resource);
        serverQueue.connection.subscribe(serverQueue.player);

        await interaction.editReply(`üéµ ƒêang ph√°t: **${song.title}**`);

        // Khi b√†i h√°t k·∫øt th√∫c ‚Üí chuy·ªÉn b√†i ti·∫øp theo
        serverQueue.player.once(AudioPlayerStatus.Idle, () => {
            serverQueue.songs.shift();
            playSong(interaction, serverQueue.songs[0]);
        });
    } catch (error) {
        console.error("üö´ L·ªói khi ph√°t b√†i:", error);
        await interaction.editReply("‚ùå Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y!");
        serverQueue.songs.shift();
        playSong(interaction, serverQueue.songs[0]);
    }
}
