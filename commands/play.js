import { SlashCommandBuilder } from "discord.js";
import {
    joinVoiceChannel,
    createAudioPlayer,
    createAudioResource,
    AudioPlayerStatus,
    NoSubscriberBehavior,
} from "@discordjs/voice";
import play from "play-dl";

// ==============================
// üîß G·∫ÆN COOKIE YOUTUBE (N·∫æU C√ì)
// ==============================
try {
    if (process.env.YT_COOKIE) {
        play.setToken({
            youtube: {
                cookie: process.env.YT_COOKIE,
            },
        });
        console.log("‚úÖ YT_COOKIE loaded");
    } else {
        console.log("‚ö†Ô∏è YT_COOKIE not set");
    }
} catch (e) {
    console.error("‚ùå Cookie setup failed:", e);
}

const queue = new Map();

export default {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("Ph√°t nh·∫°c t·ª´ YouTube (link ho·∫∑c t√™n b√†i h√°t)")
        .addStringOption((option) =>
            option
                .setName("query")
                .setDescription("Link ho·∫∑c t√™n b√†i h√°t")
                .setRequired(true)
        ),

    async execute(interaction) {
        const query = interaction.options.getString("query");
        const voiceChannel = interaction.member.voice.channel;

        if (!voiceChannel) {
            return interaction.reply({
                content: "üö´ B·∫°n ph·∫£i v√†o k√™nh tho·∫°i tr∆∞·ªõc!",
                ephemeral: true,
            });
        }

        await interaction.deferReply();

        try {
            let songInfo;
            let videoUrl;
            let videoId;

            // ==============================
            // üîç Ki·ªÉm tra query l√† link hay t·ª´ kh√≥a
            // ==============================
            const validation = play.yt_validate(query);

            if (validation === "video") {
                // N·∫øu l√† link video YouTube
                songInfo = await safeVideoInfo(query);
                videoId = songInfo?.video_details?.id;
                videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            } else {
                // N·∫øu l√† t·ª´ kh√≥a ‚Üí t√¨m ki·∫øm video ƒë·∫ßu ti√™n
                const searched = await play.search(query, { limit: 1 });
                if (!searched.length) {
                    return interaction.editReply("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o.");
                }

                videoId = searched[0].id || searched[0].url?.split("v=")[1];
                videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
                songInfo = await safeVideoInfo(videoUrl);
            }

            // ==============================
            // üß© T·∫°o object b√†i h√°t
            // ==============================
            const details = songInfo?.video_details || {};
            const song = {
                title: details.title || "Kh√¥ng r√µ t√™n b√†i h√°t",
                url: videoUrl,
                duration: details.durationRaw || "Kh√¥ng r√µ th·ªùi l∆∞·ª£ng",
            };

            // ==============================
            // üé∂ H√†ng ch·ªù ph√°t nh·∫°c
            // ==============================
            let serverQueue = queue.get(interaction.guild.id);

            if (!serverQueue) {
                const queueConstruct = {
                    voiceChannel,
                    connection: null,
                    songs: [],
                    player: createAudioPlayer({
                        behaviors: { noSubscriber: NoSubscriberBehavior.Play },
                    }),
                };

                queue.set(interaction.guild.id, queueConstruct);
                queueConstruct.songs.push(song);

                const connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: interaction.guild.id,
                    adapterCreator: interaction.guild.voiceAdapterCreator,
                });

                queueConstruct.connection = connection;
                await playSong(interaction, queueConstruct.songs[0]);
            } else {
                serverQueue.songs.push(song);
                await interaction.editReply(`‚úÖ Th√™m v√†o h√†ng ch·ªù: **${song.title}**`);
            }
        } catch (err) {
            console.error("üö´ L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu ph√°t nh·∫°c:", err);
            await interaction.editReply("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c!");
        }
    },
};

// ==============================
// üéµ H√ÄM PH√ÅT NH·∫†C CH√çNH
// ==============================
async function playSong(interaction, song) {
    const serverQueue = queue.get(interaction.guild.id);
    if (!song) {
        serverQueue.connection.destroy();
        queue.delete(interaction.guild.id);
        await interaction.editReply("‚úÖ Danh s√°ch ph√°t ƒë√£ h·∫øt!");
        return;
    }

    try {
        if (!song.url || !song.url.startsWith("http")) {
            throw new Error("URL kh√¥ng h·ª£p l·ªá: " + song.url);
        }

        const stream = await play.stream(song.url);
        const resource = createAudioResource(stream.stream, {
            inputType: stream.type,
        });

        serverQueue.player.play(resource);
        serverQueue.connection.subscribe(serverQueue.player);

        await interaction.editReply(`üéµ ƒêang ph√°t: **${song.title}**`);

        serverQueue.player.once(AudioPlayerStatus.Idle, () => {
            serverQueue.songs.shift();
            playSong(interaction, serverQueue.songs[0]);
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi ph√°t b√†i:", error);
        await interaction.editReply(
            `‚ö†Ô∏è Kh√¥ng th·ªÉ ph√°t b√†i h√°t: **${song?.title || "Kh√¥ng x√°c ƒë·ªãnh"}**`
        );
        serverQueue.songs.shift();
        playSong(interaction, serverQueue.songs[0]);
    }
}

// ==============================
// üß† SAFE VIDEO INFO WRAPPER
// ==============================
// B·ªçc play.video_info() ƒë·ªÉ tr√°nh JSON parse l·ªói (Unexpected character)
async function safeVideoInfo(url) {
    try {
        return await play.video_info(url);
    } catch (err) {
        console.warn("‚ö†Ô∏è play.video_info th·∫•t b·∫°i, d√πng fallback:", err.message);
        // fallback t·ªëi thi·ªÉu ƒë·ªÉ v·∫´n ph√°t ƒë∆∞·ª£c
        const videoId = url.split("v=")[1];
        return {
            video_details: {
                id: videoId,
                title: "Video kh√¥ng x√°c ƒë·ªãnh",
                durationRaw: "Kh√¥ng r√µ",
            },
        };
    }
}
